#ifndef _LIVE_P2PCOMMON2_NEW_SOURCEREADERLIB_DATA_BUFFER_H_
#define _LIVE_P2PCOMMON2_NEW_SOURCEREADERLIB_DATA_BUFFER_H_
#include "SourceReaderLib.h"
#include <string>
using namespace std;

namespace Synacast
{
	namespace Common
	{

		/************************************************************************/
		/* 
		提供数据缓冲区
		*/
		/************************************************************************/
		class SOURCEREADERLIB_API DataBuffer
		{
		public:
			DataBuffer(void);
			/************************************************************************/
			/* 
			数据缓冲区构造函数
			initSize: 数据缓冲区的初始大小
			*/
			/************************************************************************/
			explicit DataBuffer(size_t initSize);
			/************************************************************************/
			/* 
			Copy构造函数
			*/
			/************************************************************************/
			DataBuffer( const DataBuffer & buffer );
			virtual ~DataBuffer(void);

		private:
			char * m_Buffer;
			size_t m_DataSize;
			size_t m_BufferSize;


		public:
			/************************************************************************/
			/* 
			往缓冲区中追加数据
			data: 数据的起始指针
			size: 追加数据的大小，按字节计数
			*/
			/************************************************************************/
			void Append(const void * data, size_t size);
/*
			void Append(char data);
			void Append(short data);
			void Append(int data);
			void Append(long data);
			void Append(float data);
			void Append(double data);
*/
			/************************************************************************/
			/* 
			往缓冲区追加数据
			data: 要添加的数据
			追加数据从data的起始位置(&data)开始，追加数据的大小是data的大小(sizeof(data))
			*/
			/************************************************************************/
			template<class T>
			void Append( const T& data )
			{
				Append( &data, sizeof( data ) );
			};

			/************************************************************************/
			/* 
			往缓冲区中追加一个ASCII字符串
			data: ASCII字符串
			按照字符往缓冲区追加的ASCII字符串，追加长度是字符串的长度。
			注意：不会在末尾追加字符'\0'
			*/
			/************************************************************************/
			template <>
			void Append<string>(const string & data)
			{
				Append( data.c_str(), data.length() * sizeof( char ) );
			}
			/************************************************************************/
			/* 
			往缓冲区中追加一个UNICODE字符串
			data: UNICODE字符串
			按照字符往缓冲区追加的UNICODE字符串，追加长度是字符串长度的两倍，因为UNICODE字符占用两个字节。
			注意：不会在末尾追加字符L'\0'
			*/
			/************************************************************************/
			template <>
			void Append<wstring>(const wstring & data);

			/************************************************************************/
			/* 
			往缓冲区中追加一个缓冲区的数据
			data: 被追加的缓冲区
			追加的大小是data的长度。
			*/
			/************************************************************************/
			template <>
			void Append<DataBuffer>(const DataBuffer & data);

			/************************************************************************/
			/* 
			清空缓冲区中的数据。
			*/
			/************************************************************************/
			void Clear();

			/************************************************************************/
			/* 
			获取缓冲区中数据的指针。
			注意：永远不应该试图访问超过缓冲区大小的数据。
			*/
			/************************************************************************/
			const char * GetData(void) const;
			/************************************************************************/
			/* 
			获取缓冲区中数据大小
			*/
			/************************************************************************/
			size_t GetSize(void) const;

		public:	// operators
			/************************************************************************/
			/* 
			赋值操作符
			*/
			/************************************************************************/
			DataBuffer & operator=( const DataBuffer & buffer );
		};

	}
}
#endif